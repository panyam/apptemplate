// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apptemplate/v1/appitems.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/apptemplate/gen/go/apptemplate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppItemsServiceName is the fully-qualified name of the AppItemsService service.
	AppItemsServiceName = "apptemplate.v1.AppItemsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppItemsServiceCreateAppItemProcedure is the fully-qualified name of the AppItemsService's
	// CreateAppItem RPC.
	AppItemsServiceCreateAppItemProcedure = "/apptemplate.v1.AppItemsService/CreateAppItem"
	// AppItemsServiceGetAppItemsProcedure is the fully-qualified name of the AppItemsService's
	// GetAppItems RPC.
	AppItemsServiceGetAppItemsProcedure = "/apptemplate.v1.AppItemsService/GetAppItems"
	// AppItemsServiceListAppItemsProcedure is the fully-qualified name of the AppItemsService's
	// ListAppItems RPC.
	AppItemsServiceListAppItemsProcedure = "/apptemplate.v1.AppItemsService/ListAppItems"
	// AppItemsServiceGetAppItemProcedure is the fully-qualified name of the AppItemsService's
	// GetAppItem RPC.
	AppItemsServiceGetAppItemProcedure = "/apptemplate.v1.AppItemsService/GetAppItem"
	// AppItemsServiceDeleteAppItemProcedure is the fully-qualified name of the AppItemsService's
	// DeleteAppItem RPC.
	AppItemsServiceDeleteAppItemProcedure = "/apptemplate.v1.AppItemsService/DeleteAppItem"
	// AppItemsServiceUpdateAppItemProcedure is the fully-qualified name of the AppItemsService's
	// UpdateAppItem RPC.
	AppItemsServiceUpdateAppItemProcedure = "/apptemplate.v1.AppItemsService/UpdateAppItem"
)

// AppItemsServiceClient is a client for the apptemplate.v1.AppItemsService service.
type AppItemsServiceClient interface {
	// *
	// Create a new appitem
	CreateAppItem(context.Context, *connect.Request[v1.CreateAppItemRequest]) (*connect.Response[v1.CreateAppItemResponse], error)
	// *
	// Batch get multiple appitems by ID
	GetAppItems(context.Context, *connect.Request[v1.GetAppItemsRequest]) (*connect.Response[v1.GetAppItemsResponse], error)
	// ListAppItems returns all available appitems
	ListAppItems(context.Context, *connect.Request[v1.ListAppItemsRequest]) (*connect.Response[v1.ListAppItemsResponse], error)
	// GetAppItem returns a specific appitem with metadata
	GetAppItem(context.Context, *connect.Request[v1.GetAppItemRequest]) (*connect.Response[v1.GetAppItemResponse], error)
	// *
	// Delete a particular appitem
	DeleteAppItem(context.Context, *connect.Request[v1.DeleteAppItemRequest]) (*connect.Response[v1.DeleteAppItemResponse], error)
	// GetAppItem returns a specific appitem with metadata
	UpdateAppItem(context.Context, *connect.Request[v1.UpdateAppItemRequest]) (*connect.Response[v1.UpdateAppItemResponse], error)
}

// NewAppItemsServiceClient constructs a client for the apptemplate.v1.AppItemsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppItemsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppItemsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	appItemsServiceMethods := v1.File_apptemplate_v1_appitems_proto.Services().ByName("AppItemsService").Methods()
	return &appItemsServiceClient{
		createAppItem: connect.NewClient[v1.CreateAppItemRequest, v1.CreateAppItemResponse](
			httpClient,
			baseURL+AppItemsServiceCreateAppItemProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("CreateAppItem")),
			connect.WithClientOptions(opts...),
		),
		getAppItems: connect.NewClient[v1.GetAppItemsRequest, v1.GetAppItemsResponse](
			httpClient,
			baseURL+AppItemsServiceGetAppItemsProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("GetAppItems")),
			connect.WithClientOptions(opts...),
		),
		listAppItems: connect.NewClient[v1.ListAppItemsRequest, v1.ListAppItemsResponse](
			httpClient,
			baseURL+AppItemsServiceListAppItemsProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("ListAppItems")),
			connect.WithClientOptions(opts...),
		),
		getAppItem: connect.NewClient[v1.GetAppItemRequest, v1.GetAppItemResponse](
			httpClient,
			baseURL+AppItemsServiceGetAppItemProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("GetAppItem")),
			connect.WithClientOptions(opts...),
		),
		deleteAppItem: connect.NewClient[v1.DeleteAppItemRequest, v1.DeleteAppItemResponse](
			httpClient,
			baseURL+AppItemsServiceDeleteAppItemProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("DeleteAppItem")),
			connect.WithClientOptions(opts...),
		),
		updateAppItem: connect.NewClient[v1.UpdateAppItemRequest, v1.UpdateAppItemResponse](
			httpClient,
			baseURL+AppItemsServiceUpdateAppItemProcedure,
			connect.WithSchema(appItemsServiceMethods.ByName("UpdateAppItem")),
			connect.WithClientOptions(opts...),
		),
	}
}

// appItemsServiceClient implements AppItemsServiceClient.
type appItemsServiceClient struct {
	createAppItem *connect.Client[v1.CreateAppItemRequest, v1.CreateAppItemResponse]
	getAppItems   *connect.Client[v1.GetAppItemsRequest, v1.GetAppItemsResponse]
	listAppItems  *connect.Client[v1.ListAppItemsRequest, v1.ListAppItemsResponse]
	getAppItem    *connect.Client[v1.GetAppItemRequest, v1.GetAppItemResponse]
	deleteAppItem *connect.Client[v1.DeleteAppItemRequest, v1.DeleteAppItemResponse]
	updateAppItem *connect.Client[v1.UpdateAppItemRequest, v1.UpdateAppItemResponse]
}

// CreateAppItem calls apptemplate.v1.AppItemsService.CreateAppItem.
func (c *appItemsServiceClient) CreateAppItem(ctx context.Context, req *connect.Request[v1.CreateAppItemRequest]) (*connect.Response[v1.CreateAppItemResponse], error) {
	return c.createAppItem.CallUnary(ctx, req)
}

// GetAppItems calls apptemplate.v1.AppItemsService.GetAppItems.
func (c *appItemsServiceClient) GetAppItems(ctx context.Context, req *connect.Request[v1.GetAppItemsRequest]) (*connect.Response[v1.GetAppItemsResponse], error) {
	return c.getAppItems.CallUnary(ctx, req)
}

// ListAppItems calls apptemplate.v1.AppItemsService.ListAppItems.
func (c *appItemsServiceClient) ListAppItems(ctx context.Context, req *connect.Request[v1.ListAppItemsRequest]) (*connect.Response[v1.ListAppItemsResponse], error) {
	return c.listAppItems.CallUnary(ctx, req)
}

// GetAppItem calls apptemplate.v1.AppItemsService.GetAppItem.
func (c *appItemsServiceClient) GetAppItem(ctx context.Context, req *connect.Request[v1.GetAppItemRequest]) (*connect.Response[v1.GetAppItemResponse], error) {
	return c.getAppItem.CallUnary(ctx, req)
}

// DeleteAppItem calls apptemplate.v1.AppItemsService.DeleteAppItem.
func (c *appItemsServiceClient) DeleteAppItem(ctx context.Context, req *connect.Request[v1.DeleteAppItemRequest]) (*connect.Response[v1.DeleteAppItemResponse], error) {
	return c.deleteAppItem.CallUnary(ctx, req)
}

// UpdateAppItem calls apptemplate.v1.AppItemsService.UpdateAppItem.
func (c *appItemsServiceClient) UpdateAppItem(ctx context.Context, req *connect.Request[v1.UpdateAppItemRequest]) (*connect.Response[v1.UpdateAppItemResponse], error) {
	return c.updateAppItem.CallUnary(ctx, req)
}

// AppItemsServiceHandler is an implementation of the apptemplate.v1.AppItemsService service.
type AppItemsServiceHandler interface {
	// *
	// Create a new appitem
	CreateAppItem(context.Context, *connect.Request[v1.CreateAppItemRequest]) (*connect.Response[v1.CreateAppItemResponse], error)
	// *
	// Batch get multiple appitems by ID
	GetAppItems(context.Context, *connect.Request[v1.GetAppItemsRequest]) (*connect.Response[v1.GetAppItemsResponse], error)
	// ListAppItems returns all available appitems
	ListAppItems(context.Context, *connect.Request[v1.ListAppItemsRequest]) (*connect.Response[v1.ListAppItemsResponse], error)
	// GetAppItem returns a specific appitem with metadata
	GetAppItem(context.Context, *connect.Request[v1.GetAppItemRequest]) (*connect.Response[v1.GetAppItemResponse], error)
	// *
	// Delete a particular appitem
	DeleteAppItem(context.Context, *connect.Request[v1.DeleteAppItemRequest]) (*connect.Response[v1.DeleteAppItemResponse], error)
	// GetAppItem returns a specific appitem with metadata
	UpdateAppItem(context.Context, *connect.Request[v1.UpdateAppItemRequest]) (*connect.Response[v1.UpdateAppItemResponse], error)
}

// NewAppItemsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppItemsServiceHandler(svc AppItemsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appItemsServiceMethods := v1.File_apptemplate_v1_appitems_proto.Services().ByName("AppItemsService").Methods()
	appItemsServiceCreateAppItemHandler := connect.NewUnaryHandler(
		AppItemsServiceCreateAppItemProcedure,
		svc.CreateAppItem,
		connect.WithSchema(appItemsServiceMethods.ByName("CreateAppItem")),
		connect.WithHandlerOptions(opts...),
	)
	appItemsServiceGetAppItemsHandler := connect.NewUnaryHandler(
		AppItemsServiceGetAppItemsProcedure,
		svc.GetAppItems,
		connect.WithSchema(appItemsServiceMethods.ByName("GetAppItems")),
		connect.WithHandlerOptions(opts...),
	)
	appItemsServiceListAppItemsHandler := connect.NewUnaryHandler(
		AppItemsServiceListAppItemsProcedure,
		svc.ListAppItems,
		connect.WithSchema(appItemsServiceMethods.ByName("ListAppItems")),
		connect.WithHandlerOptions(opts...),
	)
	appItemsServiceGetAppItemHandler := connect.NewUnaryHandler(
		AppItemsServiceGetAppItemProcedure,
		svc.GetAppItem,
		connect.WithSchema(appItemsServiceMethods.ByName("GetAppItem")),
		connect.WithHandlerOptions(opts...),
	)
	appItemsServiceDeleteAppItemHandler := connect.NewUnaryHandler(
		AppItemsServiceDeleteAppItemProcedure,
		svc.DeleteAppItem,
		connect.WithSchema(appItemsServiceMethods.ByName("DeleteAppItem")),
		connect.WithHandlerOptions(opts...),
	)
	appItemsServiceUpdateAppItemHandler := connect.NewUnaryHandler(
		AppItemsServiceUpdateAppItemProcedure,
		svc.UpdateAppItem,
		connect.WithSchema(appItemsServiceMethods.ByName("UpdateAppItem")),
		connect.WithHandlerOptions(opts...),
	)
	return "/apptemplate.v1.AppItemsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppItemsServiceCreateAppItemProcedure:
			appItemsServiceCreateAppItemHandler.ServeHTTP(w, r)
		case AppItemsServiceGetAppItemsProcedure:
			appItemsServiceGetAppItemsHandler.ServeHTTP(w, r)
		case AppItemsServiceListAppItemsProcedure:
			appItemsServiceListAppItemsHandler.ServeHTTP(w, r)
		case AppItemsServiceGetAppItemProcedure:
			appItemsServiceGetAppItemHandler.ServeHTTP(w, r)
		case AppItemsServiceDeleteAppItemProcedure:
			appItemsServiceDeleteAppItemHandler.ServeHTTP(w, r)
		case AppItemsServiceUpdateAppItemProcedure:
			appItemsServiceUpdateAppItemHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppItemsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppItemsServiceHandler struct{}

func (UnimplementedAppItemsServiceHandler) CreateAppItem(context.Context, *connect.Request[v1.CreateAppItemRequest]) (*connect.Response[v1.CreateAppItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.CreateAppItem is not implemented"))
}

func (UnimplementedAppItemsServiceHandler) GetAppItems(context.Context, *connect.Request[v1.GetAppItemsRequest]) (*connect.Response[v1.GetAppItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.GetAppItems is not implemented"))
}

func (UnimplementedAppItemsServiceHandler) ListAppItems(context.Context, *connect.Request[v1.ListAppItemsRequest]) (*connect.Response[v1.ListAppItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.ListAppItems is not implemented"))
}

func (UnimplementedAppItemsServiceHandler) GetAppItem(context.Context, *connect.Request[v1.GetAppItemRequest]) (*connect.Response[v1.GetAppItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.GetAppItem is not implemented"))
}

func (UnimplementedAppItemsServiceHandler) DeleteAppItem(context.Context, *connect.Request[v1.DeleteAppItemRequest]) (*connect.Response[v1.DeleteAppItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.DeleteAppItem is not implemented"))
}

func (UnimplementedAppItemsServiceHandler) UpdateAppItem(context.Context, *connect.Request[v1.UpdateAppItemRequest]) (*connect.Response[v1.UpdateAppItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apptemplate.v1.AppItemsService.UpdateAppItem is not implemented"))
}
