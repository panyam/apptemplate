// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: apptemplate/v1/appitems.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppItemsService_CreateAppItem_FullMethodName = "/apptemplate.v1.AppItemsService/CreateAppItem"
	AppItemsService_GetAppItems_FullMethodName   = "/apptemplate.v1.AppItemsService/GetAppItems"
	AppItemsService_ListAppItems_FullMethodName  = "/apptemplate.v1.AppItemsService/ListAppItems"
	AppItemsService_GetAppItem_FullMethodName    = "/apptemplate.v1.AppItemsService/GetAppItem"
	AppItemsService_DeleteAppItem_FullMethodName = "/apptemplate.v1.AppItemsService/DeleteAppItem"
	AppItemsService_UpdateAppItem_FullMethodName = "/apptemplate.v1.AppItemsService/UpdateAppItem"
)

// AppItemsServiceClient is the client API for AppItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AppItemsService manages the appitem examples catalog
type AppItemsServiceClient interface {
	// *
	// Create a new appitem
	CreateAppItem(ctx context.Context, in *CreateAppItemRequest, opts ...grpc.CallOption) (*CreateAppItemResponse, error)
	// *
	// Batch get multiple appitems by ID
	GetAppItems(ctx context.Context, in *GetAppItemsRequest, opts ...grpc.CallOption) (*GetAppItemsResponse, error)
	// ListAppItems returns all available appitems
	ListAppItems(ctx context.Context, in *ListAppItemsRequest, opts ...grpc.CallOption) (*ListAppItemsResponse, error)
	// GetAppItem returns a specific appitem with metadata
	GetAppItem(ctx context.Context, in *GetAppItemRequest, opts ...grpc.CallOption) (*GetAppItemResponse, error)
	// *
	// Delete a particular appitem
	DeleteAppItem(ctx context.Context, in *DeleteAppItemRequest, opts ...grpc.CallOption) (*DeleteAppItemResponse, error)
	// GetAppItem returns a specific appitem with metadata
	UpdateAppItem(ctx context.Context, in *UpdateAppItemRequest, opts ...grpc.CallOption) (*UpdateAppItemResponse, error)
}

type appItemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppItemsServiceClient(cc grpc.ClientConnInterface) AppItemsServiceClient {
	return &appItemsServiceClient{cc}
}

func (c *appItemsServiceClient) CreateAppItem(ctx context.Context, in *CreateAppItemRequest, opts ...grpc.CallOption) (*CreateAppItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppItemResponse)
	err := c.cc.Invoke(ctx, AppItemsService_CreateAppItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appItemsServiceClient) GetAppItems(ctx context.Context, in *GetAppItemsRequest, opts ...grpc.CallOption) (*GetAppItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppItemsResponse)
	err := c.cc.Invoke(ctx, AppItemsService_GetAppItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appItemsServiceClient) ListAppItems(ctx context.Context, in *ListAppItemsRequest, opts ...grpc.CallOption) (*ListAppItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppItemsResponse)
	err := c.cc.Invoke(ctx, AppItemsService_ListAppItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appItemsServiceClient) GetAppItem(ctx context.Context, in *GetAppItemRequest, opts ...grpc.CallOption) (*GetAppItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppItemResponse)
	err := c.cc.Invoke(ctx, AppItemsService_GetAppItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appItemsServiceClient) DeleteAppItem(ctx context.Context, in *DeleteAppItemRequest, opts ...grpc.CallOption) (*DeleteAppItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppItemResponse)
	err := c.cc.Invoke(ctx, AppItemsService_DeleteAppItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appItemsServiceClient) UpdateAppItem(ctx context.Context, in *UpdateAppItemRequest, opts ...grpc.CallOption) (*UpdateAppItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppItemResponse)
	err := c.cc.Invoke(ctx, AppItemsService_UpdateAppItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppItemsServiceServer is the server API for AppItemsService service.
// All implementations should embed UnimplementedAppItemsServiceServer
// for forward compatibility.
//
// AppItemsService manages the appitem examples catalog
type AppItemsServiceServer interface {
	// *
	// Create a new appitem
	CreateAppItem(context.Context, *CreateAppItemRequest) (*CreateAppItemResponse, error)
	// *
	// Batch get multiple appitems by ID
	GetAppItems(context.Context, *GetAppItemsRequest) (*GetAppItemsResponse, error)
	// ListAppItems returns all available appitems
	ListAppItems(context.Context, *ListAppItemsRequest) (*ListAppItemsResponse, error)
	// GetAppItem returns a specific appitem with metadata
	GetAppItem(context.Context, *GetAppItemRequest) (*GetAppItemResponse, error)
	// *
	// Delete a particular appitem
	DeleteAppItem(context.Context, *DeleteAppItemRequest) (*DeleteAppItemResponse, error)
	// GetAppItem returns a specific appitem with metadata
	UpdateAppItem(context.Context, *UpdateAppItemRequest) (*UpdateAppItemResponse, error)
}

// UnimplementedAppItemsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppItemsServiceServer struct{}

func (UnimplementedAppItemsServiceServer) CreateAppItem(context.Context, *CreateAppItemRequest) (*CreateAppItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppItem not implemented")
}
func (UnimplementedAppItemsServiceServer) GetAppItems(context.Context, *GetAppItemsRequest) (*GetAppItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppItems not implemented")
}
func (UnimplementedAppItemsServiceServer) ListAppItems(context.Context, *ListAppItemsRequest) (*ListAppItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppItems not implemented")
}
func (UnimplementedAppItemsServiceServer) GetAppItem(context.Context, *GetAppItemRequest) (*GetAppItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppItem not implemented")
}
func (UnimplementedAppItemsServiceServer) DeleteAppItem(context.Context, *DeleteAppItemRequest) (*DeleteAppItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppItem not implemented")
}
func (UnimplementedAppItemsServiceServer) UpdateAppItem(context.Context, *UpdateAppItemRequest) (*UpdateAppItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppItem not implemented")
}
func (UnimplementedAppItemsServiceServer) testEmbeddedByValue() {}

// UnsafeAppItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppItemsServiceServer will
// result in compilation errors.
type UnsafeAppItemsServiceServer interface {
	mustEmbedUnimplementedAppItemsServiceServer()
}

func RegisterAppItemsServiceServer(s grpc.ServiceRegistrar, srv AppItemsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppItemsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppItemsService_ServiceDesc, srv)
}

func _AppItemsService_CreateAppItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).CreateAppItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_CreateAppItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).CreateAppItem(ctx, req.(*CreateAppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppItemsService_GetAppItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).GetAppItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_GetAppItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).GetAppItems(ctx, req.(*GetAppItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppItemsService_ListAppItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).ListAppItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_ListAppItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).ListAppItems(ctx, req.(*ListAppItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppItemsService_GetAppItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).GetAppItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_GetAppItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).GetAppItem(ctx, req.(*GetAppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppItemsService_DeleteAppItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).DeleteAppItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_DeleteAppItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).DeleteAppItem(ctx, req.(*DeleteAppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppItemsService_UpdateAppItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppItemsServiceServer).UpdateAppItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppItemsService_UpdateAppItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppItemsServiceServer).UpdateAppItem(ctx, req.(*UpdateAppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppItemsService_ServiceDesc is the grpc.ServiceDesc for AppItemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppItemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apptemplate.v1.AppItemsService",
	HandlerType: (*AppItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppItem",
			Handler:    _AppItemsService_CreateAppItem_Handler,
		},
		{
			MethodName: "GetAppItems",
			Handler:    _AppItemsService_GetAppItems_Handler,
		},
		{
			MethodName: "ListAppItems",
			Handler:    _AppItemsService_ListAppItems_Handler,
		},
		{
			MethodName: "GetAppItem",
			Handler:    _AppItemsService_GetAppItem_Handler,
		},
		{
			MethodName: "DeleteAppItem",
			Handler:    _AppItemsService_DeleteAppItem_Handler,
		},
		{
			MethodName: "UpdateAppItem",
			Handler:    _AppItemsService_UpdateAppItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apptemplate/v1/appitems.proto",
}
